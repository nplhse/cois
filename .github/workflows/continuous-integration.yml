name: Continuous Integration

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read

jobs:
    static-analysis:
        name: Static Analysis (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                php-versions: ["8.2"]
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}

            - name: Validate main `composer.json` and `composer.lock` files
              run: composer validate --no-check-version

            - name: Composer Dependencies
              uses: "ramsey/composer-install@v2"

            - name: Cache node_modules
              uses: actions/cache@v3
              id: yarn-cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-cache-node-modules-

            - name: Yarn install
              if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
              run: yarn install

            - name: Run Webpack (as dev)
              run: yarn encore dev

            - name: Analyse JS (ESLint)
              run: yarn run eslint assets

            - name: Analyse PHP Code (PHPStan)
              run: vendor/bin/phpstan analyse

            - name: Analyse PHP Code (Psalm)
              run: vendor/bin/psalm

    tests:
        name: Tests (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mysql:latest
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: false
                    MYSQL_ROOT_PASSWORD: symfony
                    MYSQL_DATABASE: symfony
                ports:
                    - 3306/tcp
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            fail-fast: true
            matrix:
                php-versions: ["8.2"]
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}

            - name: Composer Dependencies
              uses: "ramsey/composer-install@v2"

            - name: Run Migration
              run: php bin/console doctrine:schema:create || echo "No schema found or schema failed"
              env:
                  DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony

            - name: Cache node_modules
              uses: actions/cache@v3
              id: yarn-cache-node-modules
              with:
                  path: node_modules
                  key: ${{ runner.os }}-yarn-cache-node-modules-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-cache-node-modules-

            - name: Yarn install
              if: steps.yarn-cache-node-modules.outputs.cache-hit != 'true'
              run: yarn install

            - name: Yarn build
              run: yarn run encore production

            - name: Execute tests via PHPUnit
              run: vendor/bin/phpunit
              env:
                  DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony

            - name: Upload coverage to Codeclimate
              if: ${{ github.actor != 'dependabot[bot]' }}
              uses: paambaati/codeclimate-action@v5.0.0
              env:
                  CC_TEST_REPORTER_ID: ${{ secrets.CODECLIMATE_REPORTER_ID }}
              with:
                  coverageLocations: ${{github.workspace}}/var/build/coverage/logs/clover.xml:clover
